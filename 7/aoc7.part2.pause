#!/usr/local/bin/python3
import sys

searchVal = 'muted olive'
theAnswers = []
count = 0
def iterator(topBag,returnString=''):
   global count
   #returnVal = returnVal
#   try:
      #length = (int(len(theRules[topBag])))
 #  print(topBag)
 #  input()
   if 'no other' not in topBag:
     for item in theRules[topBag]:
           if 'no other' in item[0]:
              #print("entered no other with " + str(item[0]) + " from " + topBag )
              returnString = "\t" + item[0]+"\n"
              #print(item)
              returnVal = 1
              #returnVal += item[1]
              #print("No items in  = " + topBag +  " for a total of 1")
           else:
              #print("before: " + str(count))
              print(item[0] + " " + str(item[1]))
              count += int(iterator(item[0]) * item[1])
              #print("after: " + str(count))
              #print(topBag + "contains qty " + item[1] + " of " + item[0] + " for a cumulative total of " + str(count))
              #print("Entered the else with: " + str(item[0]) + str(returnString))
              #print(item)
              returnVal = count 
              #returnVal += inti((item[1])*iterator(item[0],returnVal)
              #print("Else" + item[0] + " with returnVal = " + str(returnVal) + " " + str(int(item[1])) + " * " + str(iterator(item[0],returnVal)))
         #if returnVal == 0:
         #    if searchVal in item[0]:
          #      returnVal = 1
          #   else:
          #      returnVal = iterator(item[0])
           print(topBag + "contains " + item[0] + " quantity " + str(item[1]) + " for a cumulative count " + str(count)) 
#   except:
#      pass
   input("press to continue")
   return returnVal

theLines = []
count = 0
for line in open("input.txt"):
   theLines.append(line.rstrip())

theRules = {} 
#print(theLines)

try:
  for line in theLines:
    topBag = (str(line.split()[0]) + " " + str(line.split()[1]))
    contents = str(line.split(" contain ")[1])
    subbags = [] 
    if "," not in contents:
       if "no other" in contents:
          subbags.append([contents.lstrip().rstrip().split()[0] + " " + contents.lstrip().rstrip().split()[1],0])
          #print(topBag)
          #print("exception no other " + str(contents.lstrip().rstrip().split()[0] + " " + contents.lstrip().rstrip().split()[1]))
       else:
          subbags.append([contents.lstrip().rstrip().split()[1] + " " + contents.lstrip().rstrip().split()[2],contents.lstrip().rstrip().split()[0]])
          #print("exception single " + contents)
    else:
       for subbag in contents.split(","):
          subbags.append([subbag.lstrip().rstrip().split()[1] + " " + subbag.lstrip().rstrip().split()[2],subbag.lstrip().rstrip().split()[0]])
    theRules.update({topBag: subbags})
    #print(topBag + " --- ")
    #print(subbags)
except:
    print("Unexpected error:", sys.exc_info()[0])
    raise

#for topBag in theRules.keys():
#   contains = 0
#   contains = iterator(topBag)
#   print("Contains! " + str(contains))
#   if contains != 0:
#       theAnswers.append(topBag)
#       count += 1
#       print(topBag)
#       print(theRules[topBag])

#print(theRules)
print(str(iterator(searchVal, topBag)))

#print(theAnswers)
#print("Answer: " + str(count) + " or " + str(len(set(theAnswers))))
##print(theRules.keys())
